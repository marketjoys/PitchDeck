import React, { useState, useEffect } from 'react';
import './App.css';
import axios from 'axios';
import { BrowserRouter, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';
import { Button } from './components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Input } from './components/ui/input';
import { Textarea } from './components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Separator } from './components/ui/separator';
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from './components/ui/sheet';
import { 
  Plus, 
  Search, 
  Layout, 
  BarChart3, 
  Users, 
  TrendingUp, 
  FileText, 
  Download,
  Lightbulb,
  Palette,
  Type,
  Image as ImageIcon,
  Zap,
  Brain,
  Target,
  Sparkles,
  Wand2,
  Paintbrush
} from 'lucide-react';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Font Loading Hook
const useFonts = (topic = 'business') => {
  const [fonts, setFonts] = useState(null);
  const [googleFontsUrl, setGoogleFontsUrl] = useState('');

  useEffect(() => {
    const loadFonts = async () => {
      try {
        const response = await axios.get(`${API}/fonts/topic/${topic}`);
        setFonts(response.data.fonts);
        setGoogleFontsUrl(response.data.google_fonts_url);
        
        // Dynamically load Google Fonts
        if (response.data.google_fonts_url && !document.querySelector(`link[href="${response.data.google_fonts_url}"]`)) {
          const link = document.createElement('link');
          link.href = response.data.google_fonts_url;
          link.rel = 'stylesheet';
          document.head.appendChild(link);
        }
      } catch (error) {
        console.error('Error loading fonts:', error);
      }
    };
    
    loadFonts();
  }, [topic]);

  return { fonts, googleFontsUrl };
};

// Font Size Hook
const useFontSizes = (slideType = 'content') => {
  const [sizes, setSizes] = useState(null);

  useEffect(() => {
    const loadSizes = async () => {
      try {
        const response = await axios.get(`${API}/fonts/sizes/${slideType}`);
        setSizes(response.data.sizes);
      } catch (error) {
        console.error('Error loading font sizes:', error);
      }
    };
    
    loadSizes();
  }, [slideType]);

  return sizes;
};

// Main Dashboard Component
const Dashboard = () => {
  const [decks, setDecks] = useState([]);
  const [templates, setTemplates] = useState([]);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showAutoGenerateDialog, setShowAutoGenerateDialog] = useState(false);
  const [newDeckTitle, setNewDeckTitle] = useState('');
  const [newDeckDescription, setNewDeckDescription] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [autoGenerating, setAutoGenerating] = useState(false);
  
  // Auto-generation form fields
  const [companyName, setCompanyName] = useState('');
  const [industry, setIndustry] = useState('');
  const [businessDescription, setBusinessDescription] = useState('');
  const [targetAudience, setTargetAudience] = useState('investors');
  const [fundingStage, setFundingStage] = useState('seed');
  
  const navigate = useNavigate();

  useEffect(() => {
    fetchDecks();
    fetchTemplates();
  }, []);

  const fetchDecks = async () => {
    try {
      const response = await axios.get(`${API}/decks`);
      setDecks(response.data);
    } catch (error) {
      console.error('Error fetching decks:', error);
    }
  };

  const fetchTemplates = async () => {
    try {
      const response = await axios.get(`${API}/templates`);
      setTemplates(response.data);
    } catch (error) {
      console.error('Error fetching templates:', error);
    }
  };

  const createDeck = async () => {
    if (!newDeckTitle.trim()) return;
    
    try {
      const response = await axios.post(`${API}/decks`, {
        title: newDeckTitle,
        description: newDeckDescription,
        template_id: selectedTemplate
      });
      
      setDecks([...decks, response.data]);
      setShowCreateDialog(false);
      setNewDeckTitle('');
      setNewDeckDescription('');
      setSelectedTemplate('');
      
      // Navigate to editor
      navigate(`/editor/${response.data.id}`);
    } catch (error) {
      console.error('Error creating deck:', error);
    }
  };

  const autoGenerateDeck = async () => {
    if (!companyName.trim() || !industry.trim()) return;
    
    setAutoGenerating(true);
    try {
      console.log('Starting enhanced auto-generation for:', companyName, industry);
      const response = await axios.post(`${API}/decks/auto-generate`, {
        company_name: companyName,
        industry: industry,
        business_description: businessDescription,
        target_audience: targetAudience,
        funding_stage: fundingStage,
        auto_populate_images: true
      }, {
        timeout: 300000  // 5 minutes timeout for enhanced AI generation with images
      });
      
      console.log('Enhanced auto-generation successful:', response.data.id);
      setDecks([...decks, response.data]);
      setShowAutoGenerateDialog(false);
      
      // Reset form
      setCompanyName('');
      setIndustry('');
      setBusinessDescription('');
      setTargetAudience('investors');
      setFundingStage('seed');
      
      // Navigate to editor
      navigate(`/editor/${response.data.id}`);
    } catch (error) {
      console.error('Error auto-generating deck:', error);
      if (error.code === 'ECONNABORTED') {
        alert('Deck generation is taking longer than expected. This happens with complex AI processing. Please try again or create a manual deck.');
      } else {
        alert('Failed to generate deck. Please try again or contact support.');
      }
    } finally {
      setAutoGenerating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-lg border-b border-slate-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Zap className="w-5 h-5 text-white" />
                </div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  DeckCraft Pro
                </h1>
              </div>
              <Badge variant="secondary" className="ml-4">AI-Powered Research</Badge>
            </div>
            
            <div className="flex items-center space-x-3">
              <Dialog open={showAutoGenerateDialog} onOpenChange={setShowAutoGenerateDialog}>
                <DialogTrigger asChild>
                  <Button className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg">
                    <Zap className="w-4 h-4 mr-2" />
                    AI Generate Deck
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-lg">
                  <DialogHeader>
                    <DialogTitle>🤖 AI Generate Complete Pitch Deck</DialogTitle>
                    <DialogDescription>
                      Let AI create a complete, investor-ready pitch deck with content and images
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <Input
                      placeholder="Company name (e.g., TechCorp)"
                      value={companyName}
                      onChange={(e) => setCompanyName(e.target.value)}
                      required
                    />
                    <Input
                      placeholder="Industry (e.g., AI/ML, FinTech, Healthcare)"
                      value={industry}
                      onChange={(e) => setIndustry(e.target.value)}
                      required
                    />
                    <Textarea
                      placeholder="Brief business description (optional but recommended)..."
                      value={businessDescription}
                      onChange={(e) => setBusinessDescription(e.target.value)}
                      rows={3}
                    />
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Target Audience</label>
                        <select 
                          className="w-full p-2 border rounded-md"
                          value={targetAudience}
                          onChange={(e) => setTargetAudience(e.target.value)}
                        >
                          <option value="investors">Investors</option>
                          <option value="customers">Customers</option>
                          <option value="partners">Partners</option>
                        </select>
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Funding Stage</label>
                        <select 
                          className="w-full p-2 border rounded-md"
                          value={fundingStage}
                          onChange={(e) => setFundingStage(e.target.value)}
                        >
                          <option value="pre-seed">Pre-Seed</option>
                          <option value="seed">Seed</option>
                          <option value="series-a">Series A</option>
                          <option value="series-b">Series B</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button 
                      onClick={autoGenerateDeck} 
                      className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                      disabled={autoGenerating || !companyName.trim() || !industry.trim()}
                    >
                      {autoGenerating ? (
                        <div className="flex items-center">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          🤖 Creating with AI & Images... (This may take 3-5 minutes)
                        </div>
                      ) : (
                        '🚀 Generate Complete Deck with AI Images'
                      )}
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>

              <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-blue-600 text-blue-600 hover:bg-blue-50">
                    <Plus className="w-4 h-4 mr-2" />
                    Manual Create
                  </Button>
                </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Create New Pitch Deck</DialogTitle>
                  <DialogDescription>
                    Choose a template or start with a creative canvas
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <Input
                    placeholder="Deck title..."
                    value={newDeckTitle}
                    onChange={(e) => setNewDeckTitle(e.target.value)}
                  />
                  <Textarea
                    placeholder="Brief description (optional)..."
                    value={newDeckDescription}
                    onChange={(e) => setNewDeckDescription(e.target.value)}
                    rows={3}
                  />
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Choose Template</label>
                    {templates.map((template) => (
                      <Card 
                        key={template.id}
                        className={`cursor-pointer transition-all hover:shadow-md ${
                          selectedTemplate === template.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                        }`}
                        onClick={() => setSelectedTemplate(template.id)}
                      >
                        <CardContent className="p-3">
                          <h4 className="font-medium">{template.name}</h4>
                          <p className="text-sm text-slate-600">{template.description}</p>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
                <DialogFooter>
                  <Button onClick={createDeck} className="w-full">
                    Create & Start Editing
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-purple-600/20"></div>
        <div 
          className="h-96 bg-cover bg-center relative"
          style={{
            backgroundImage: `url('https://images.unsplash.com/photo-1590098563686-06ab8778a6a7?auto=format&fit=crop&w=1920&q=80')`
          }}
        >
          <div className="absolute inset-0 bg-gradient-to-r from-slate-900/70 to-slate-900/50"></div>
          <div className="relative z-10 max-w-7xl mx-auto px-6 py-20">
            <div className="text-center text-white">
              <h2 className="text-4xl md:text-6xl font-bold mb-6">
                Build Investor-Ready
                <span className="block bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                  Pitch Decks
                </span>
              </h2>
              <p className="text-xl md:text-2xl text-slate-200 mb-8 max-w-3xl mx-auto">
                AI-powered research meets creative design. Create compelling pitch decks with real-time market data and professional templates.
              </p>
              <div className="flex flex-wrap justify-center gap-4">
                <Button 
                  size="lg" 
                  className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                  onClick={() => setShowAutoGenerateDialog(true)}
                >
                  <Zap className="w-5 h-5 mr-2" />
                  AI Generate Deck
                </Button>
                <Button 
                  size="lg" 
                  variant="outline" 
                  className="bg-white/10 border-white/20 text-white hover:bg-white/20"
                  onClick={() => setShowCreateDialog(true)}
                >
                  <Lightbulb className="w-5 h-5 mr-2" />
                  Manual Create
                </Button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Grid */}
      <section className="py-20 px-6">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h3 className="text-3xl font-bold mb-4">Powerful Features for Perfect Pitches</h3>
            <p className="text-xl text-slate-600">Everything you need to create compelling, data-driven presentations</p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mb-4">
                  <Brain className="w-6 h-6 text-white" />
                </div>
                <CardTitle>AI Research Assistant</CardTitle>
                <CardDescription>
                  Real-time market research, competitive analysis, and industry insights powered by Perplexity AI
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center mb-4">
                  <Palette className="w-6 h-6 text-white" />
                </div>
                <CardTitle>Creative Canvas</CardTitle>
                <CardDescription>
                  Drag-and-drop editor with professional templates and unlimited customization options
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center mb-4">
                  <TrendingUp className="w-6 h-6 text-white" />
                </div>
                <CardTitle>Market Intelligence</CardTitle>
                <CardDescription>
                  Live market data, growth projections, and competitive benchmarking with citations
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-lg flex items-center justify-center mb-4">
                  <Target className="w-6 h-6 text-white" />
                </div>
                <CardTitle>Investor-Tested Templates</CardTitle>
                <CardDescription>
                  15+ proven templates optimized for different industries and funding stages
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center mb-4">
                  <Download className="w-6 h-6 text-white" />
                </div>
                <CardTitle>Multi-Format Export</CardTitle>
                <CardDescription>
                  Export to PDF, PowerPoint, HTML5, and video formats for any presentation scenario
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              <CardHeader>
                <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-lg flex items-center justify-center mb-4">
                  <Users className="w-6 h-6 text-white" />
                </div>
                <CardTitle>Team Collaboration</CardTitle>
                <CardDescription>
                  Real-time editing, comments, and feedback system for seamless team collaboration
                </CardDescription>
              </CardHeader>
            </Card>
          </div>
        </div>
      </section>

      {/* Your Decks Section */}
      {decks.length > 0 && (
        <section className="py-20 px-6 bg-white/50">
          <div className="max-w-7xl mx-auto">
            <div className="flex items-center justify-between mb-8">
              <h3 className="text-3xl font-bold">Your Pitch Decks</h3>
              <Button 
                variant="outline"
                onClick={() => setShowCreateDialog(true)}
              >
                <Plus className="w-4 h-4 mr-2" />
                New Deck
              </Button>
            </div>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {decks.map((deck) => (
                <Card key={deck.id} className="group cursor-pointer hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="group-hover:text-blue-600 transition-colors">
                          {deck.title}
                        </CardTitle>
                        <CardDescription className="mt-2">
                          {deck.description || "No description"}
                        </CardDescription>
                      </div>
                      <Badge variant="secondary">{deck.slides?.length || 0} slides</Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <p className="text-sm text-slate-500">
                        Updated {new Date(deck.updated_at).toLocaleDateString()}
                      </p>
                      <Button 
                        size="sm"
                        onClick={() => navigate(`/editor/${deck.id}`)}
                        className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      >
                        Edit
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>
      )}
    </div>
  );
};

// Slide Editor Component
const SlideEditor = () => {
  const { deckId } = useParams();
  const [deck, setDeck] = useState(null);
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);
  const [researchPanel, setResearchPanel] = useState(false);
  const [imagePanel, setImagePanel] = useState(false);
  const [fontPanel, setFontPanel] = useState(false);
  const [stockImages, setStockImages] = useState([]);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [generatingImage, setGeneratingImage] = useState(false);
  const [researchQuery, setResearchQuery] = useState('');
  const [researchResults, setResearchResults] = useState(null);
  const [researchLoading, setResearchLoading] = useState(false);
  const [exportLoading, setExportLoading] = useState(false);
  const [selectedTopic, setSelectedTopic] = useState('business');
  const [selectedSlideType, setSelectedSlideType] = useState('content');
  const [imagePrompt, setImagePrompt] = useState('');
  const [imageStyle, setImageStyle] = useState('professional');
  const navigate = useNavigate();

  // Load dynamic fonts and sizes
  const { fonts } = useFonts(selectedTopic);
  const fontSizes = useFontSizes(selectedSlideType);

  useEffect(() => {
    fetchDeck();
    fetchStockImages();
  }, [deckId]);

  const fetchDeck = async () => {
    try {
      const response = await axios.get(`${API}/decks/${deckId}`);
      setDeck(response.data);
    } catch (error) {
      console.error('Error fetching deck:', error);
    }
  };

  const fetchStockImages = async () => {
    try {
      const response = await axios.get(`${API}/images/stock`);
      setStockImages(response.data);
    } catch (error) {
      console.error('Error fetching stock images:', error);
    }
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setUploadingImage(true);
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await axios.post(`${API}/images/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      if (response.data.success) {
        // Add image to current slide
        const imageUrl = `${BACKEND_URL}${response.data.image_url}`;
        updateSlide(currentSlide.id, { 
          images: [...(currentSlide.images || []), imageUrl]
        });
      }
    } catch (error) {
      console.error('Error uploading image:', error);
    } finally {
      setUploadingImage(false);
    }
  };

  const addStockImageToSlide = (imageUrl) => {
    updateSlide(currentSlide.id, { 
      images: [...(currentSlide.images || []), imageUrl]
    });
  };

  const setSlideBackgroundImage = (imageUrl) => {
    updateSlide(currentSlide.id, { background_image: imageUrl });
  };

  const removeImageFromSlide = (imageIndex) => {
    const updatedImages = currentSlide.images.filter((_, index) => index !== imageIndex);
    updateSlide(currentSlide.id, { images: updatedImages });
  };

  const exportToPDF = async () => {
    setExportLoading(true);
    try {
      const response = await axios.post(`${API}/export/pdf/${deckId}`, {}, {
        responseType: 'blob',
      });
      
      // Create download link
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${deck.title}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error exporting PDF:', error);
    } finally {
      setExportLoading(false);
    }
  };

  const updateSlide = async (slideId, updates) => {
    try {
      await axios.put(`${API}/decks/${deckId}/slides/${slideId}`, updates);
      // Update local state
      setDeck(prev => ({
        ...prev,
        slides: prev.slides.map(slide => 
          slide.id === slideId ? { ...slide, ...updates } : slide
        )
      }));
    } catch (error) {
      console.error('Error updating slide:', error);
    }
  };

  const generateAIImage = async () => {
    if (!imagePrompt.trim()) return;
    
    setGeneratingImage(true);
    try {
      const response = await axios.post(`${API}/images/generate`, {
        prompt: imagePrompt,
        style: imageStyle
      });
      
      if (response.data.success) {
        const imageUrl = `${BACKEND_URL}${response.data.image_url}`;
        // Add to current slide as background
        updateSlide(currentSlide.id, { background_image: imageUrl });
        setImagePrompt('');
      }
    } catch (error) {
      console.error('Error generating AI image:', error);
      alert('Failed to generate image. Please try again.');
    } finally {
      setGeneratingImage(false);
    }
  };

  const conductEnhancedResearch = async (type = 'market-analysis') => {
    if (!researchQuery.trim()) return;
    
    setResearchLoading(true);
    try {
      const response = await axios.post(`${API}/research/enhanced-content`, {
        query: researchQuery,
        research_type: type,
        industry: deck?.title?.split(' - ')[0] || "technology",
        max_tokens: 2000
      });
      setResearchResults(response.data);
      
      // Auto-set image prompt from research
      if (response.data.data.image_prompt) {
        setImagePrompt(response.data.data.image_prompt);
      }
    } catch (error) {
      console.error('Error conducting enhanced research:', error);
    } finally {
      setResearchLoading(false);
    }
  };

  if (!deck) return <div className="flex items-center justify-center h-screen">Loading...</div>;

  const currentSlide = deck.slides[currentSlideIndex];

  return (
    <div className="h-screen flex bg-slate-50">
      {/* Sidebar - Slide Navigation */}
      <div className="w-64 bg-white border-r border-slate-200 flex flex-col">
        <div className="p-4 border-b">
          <Button 
            variant="ghost" 
            onClick={() => navigate('/')}
            className="w-full justify-start"
          >
            ← Back to Dashboard
          </Button>
          <h2 className="font-semibold mt-4 truncate">{deck.title}</h2>
        </div>
        
        <div className="flex-1 overflow-y-auto p-2">
          <div className="space-y-2">
            {deck.slides.map((slide, index) => (
              <Card 
                key={slide.id}
                className={`cursor-pointer transition-all hover:shadow-md ${
                  index === currentSlideIndex ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                }`}
                onClick={() => setCurrentSlideIndex(index)}
              >
                <CardContent className="p-3">
                  <div className="aspect-video bg-gradient-to-br from-slate-100 to-slate-200 rounded mb-2 flex items-center justify-center">
                    <Layout className="w-6 h-6 text-slate-400" />
                  </div>
                  <p className="text-sm font-medium truncate">{slide.title}</p>
                  <p className="text-xs text-slate-500">Slide {index + 1}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
        
        <div className="p-4 border-t">
          <Button 
            className="w-full mb-2"
            onClick={() => setResearchPanel(true)}
          >
            <Brain className="w-4 h-4 mr-2" />
            AI Research
          </Button>
          <Button 
            variant="outline" 
            className="w-full"
            onClick={exportToPDF}
            disabled={exportLoading}
          >
            <Download className="w-4 h-4 mr-2" />
            {exportLoading ? 'Exporting...' : 'Export PDF'}
          </Button>
        </div>
      </div>

      {/* Main Editor */}
      <div className="flex-1 flex flex-col">
        {/* Toolbar */}
        <div className="bg-white border-b border-slate-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h3 className="font-semibold">Slide {currentSlideIndex + 1}: {currentSlide?.title}</h3>
              {fonts && (
                <Badge variant="secondary" className="text-xs">
                  Font: {fonts.primary} • {fonts.character}
                </Badge>
              )}
            </div>
            <div className="flex items-center space-x-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setFontPanel(true)}
              >
                <Type className="w-4 h-4" />
                <span className="ml-1 hidden sm:inline">Fonts</span>
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setImagePanel(true)}
              >
                <ImageIcon className="w-4 h-4" />
                <span className="ml-1 hidden sm:inline">Images</span>
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setResearchPanel(true)}
              >
                <Brain className="w-4 h-4" />
                <span className="ml-1 hidden sm:inline">AI Research</span>
              </Button>
              <Button variant="outline" size="sm">
                <BarChart3 className="w-4 h-4" />
              </Button>
              <Separator orientation="vertical" className="h-6" />
              <Button size="sm" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white">
                Save Changes
              </Button>
            </div>
          </div>
        </div>

        {/* Canvas Area */}
        <div className="flex-1 p-8 overflow-auto">
          <div className="max-w-4xl mx-auto">
            <Card 
              className="aspect-video bg-white shadow-lg relative overflow-hidden"
              style={{
                backgroundImage: currentSlide?.background_image ? `url(${currentSlide.background_image})` : 'none',
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                fontFamily: fonts ? fonts.primary : 'Inter'
              }}
            >
              {currentSlide?.background_image && (
                <div className="absolute inset-0 bg-black/30"></div>
              )}
              <CardContent className="p-8 h-full relative z-10">
                <div className="h-full flex flex-col">
                  <Input
                    value={currentSlide?.title || ''}
                    onChange={(e) => updateSlide(currentSlide.id, { title: e.target.value })}
                    className={`${fontSizes?.main || 'text-2xl'} font-bold border-0 p-0 mb-6 bg-transparent ${
                      currentSlide?.background_image ? 'text-white' : 'text-slate-900'
                    }`}
                    style={{ fontFamily: fonts ? fonts.primary : 'Inter' }}
                    placeholder="Slide title..."
                  />
                  <Textarea
                    value={currentSlide?.content || ''}
                    onChange={(e) => updateSlide(currentSlide.id, { content: e.target.value })}
                    className={`flex-1 border-0 p-0 resize-none bg-transparent ${fontSizes?.description || 'text-lg'} ${
                      currentSlide?.background_image ? 'text-white placeholder-white/70' : 'text-slate-700'
                    }`}
                    style={{ fontFamily: fonts ? fonts.secondary : 'Inter' }}
                    placeholder="Add your content here..."
                  />
                  
                  {/* Display slide images */}
                  {currentSlide?.images && currentSlide.images.length > 0 && (
                    <div className="mt-4 grid grid-cols-2 gap-4">
                      {currentSlide.images.map((imageUrl, index) => (
                        <div key={index} className="relative group">
                          <img 
                            src={imageUrl} 
                            alt={`Slide image ${index + 1}`}
                            className="w-full h-32 object-cover rounded-lg"
                          />
                          <Button
                            size="sm"
                            variant="destructive"
                            className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={() => removeImageFromSlide(index)}
                          >
                            ×
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Research Panel */}
      <Sheet open={researchPanel} onOpenChange={setResearchPanel}>
        <SheetContent className="w-[500px] sm:w-[540px] z-[60]">
          <SheetHeader>
            <SheetTitle className="flex items-center">
              <Brain className="w-5 h-5 mr-2" />
              AI Research Assistant
            </SheetTitle>
            <SheetDescription>
              Get real-time market research, competitive analysis, and content suggestions
            </SheetDescription>
          </SheetHeader>
          
          <div className="mt-6 space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Research Query</label>
              <Textarea
                placeholder="e.g., AI market size and growth trends, competitive analysis for SaaS startups..."
                value={researchQuery}
                onChange={(e) => setResearchQuery(e.target.value)}
                rows={3}
              />
            </div>
            
            <Tabs defaultValue="market" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="market">Market</TabsTrigger>
                <TabsTrigger value="competition">Competition</TabsTrigger>
                <TabsTrigger value="content">Content</TabsTrigger>
              </TabsList>
              
              <TabsContent value="market" className="space-y-3">
                <Button 
                  className="w-full" 
                  onClick={() => conductEnhancedResearch('market-analysis')}
                  disabled={researchLoading}
                >
                  {researchLoading ? 'Researching...' : 'Analyze Market'}
                </Button>
              </TabsContent>
              
              <TabsContent value="competition" className="space-y-3">
                <Button 
                  className="w-full" 
                  onClick={() => conductEnhancedResearch('competitive-analysis')}
                  disabled={researchLoading}
                >
                  {researchLoading ? 'Analyzing...' : 'Analyze Competition'}
                </Button>
              </TabsContent>
              
              <TabsContent value="content" className="space-y-3">
                <Button 
                  className="w-full" 
                  onClick={() => conductEnhancedResearch('content-generation')}
                  disabled={researchLoading}
                >
                  {researchLoading ? 'Generating...' : 'Generate Content'}
                </Button>
              </TabsContent>
            </Tabs>

            {/* Research Results */}
            {researchResults && (
              <div className="mt-6 space-y-4">
                <Separator />
                <div>
                  <h4 className="font-semibold mb-3">Research Results</h4>
                  <Card>
                    <CardContent className="p-4">
                      <div className="prose prose-sm max-w-none">
                        <p className="whitespace-pre-wrap text-sm">
                          {researchResults.data.content}
                        </p>
                      </div>
                      
                      {researchResults.data.citations.length > 0 && (
                        <div className="mt-4 pt-4 border-t">
                          <p className="text-sm font-medium mb-2">Sources:</p>
                          <div className="space-y-2">
                            {researchResults.data.citations.map((citation, index) => (
                              <div key={index} className="text-xs">
                                <a href={citation.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                  {citation.title}
                                </a>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <Button 
                        size="sm" 
                        className="mt-4 w-full"
                        onClick={() => {
                          if (currentSlide) {
                            updateSlide(currentSlide.id, { 
                              content: currentSlide.content + '\n\n' + researchResults.data.content 
                            });
                          }
                        }}
                      >
                        Add to Slide
                      </Button>
                    </CardContent>
                  </Card>
                </div>
              </div>
            )}
          </div>
        </SheetContent>
      </Sheet>

      {/* Image Panel */}
      <Sheet open={imagePanel} onOpenChange={setImagePanel}>
        <SheetContent className="w-[500px] sm:w-[540px] z-[60]">
          <SheetHeader>
            <SheetTitle className="flex items-center">
              <ImageIcon className="w-5 h-5 mr-2" />
              Image Library & AI Generation
            </SheetTitle>
            <SheetDescription>
              Generate custom AI images, use stock images, or upload your own
            </SheetDescription>
          </SheetHeader>
          
          <div className="mt-6 space-y-4">
            <Tabs defaultValue="ai-generate" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="ai-generate">AI Generate</TabsTrigger>
                <TabsTrigger value="stock">Stock Images</TabsTrigger>
                <TabsTrigger value="upload">Upload</TabsTrigger>
              </TabsList>
              
              <TabsContent value="ai-generate" className="space-y-4">
                <div className="space-y-3">
                  <label className="text-sm font-medium">Image Prompt</label>
                  <Textarea
                    placeholder="Describe the image you want to generate..."
                    value={imagePrompt}
                    onChange={(e) => setImagePrompt(e.target.value)}
                    rows={3}
                  />
                  {researchResults?.data?.image_prompt && (
                    <div className="text-xs text-slate-600 bg-blue-50 p-2 rounded">
                      <strong>Suggested from research:</strong> {researchResults.data.image_prompt}
                    </div>
                  )}
                </div>
                
                <div className="space-y-2">
                  <label className="text-sm font-medium">Style</label>
                  <select 
                    className="w-full p-2 border rounded-md"
                    value={imageStyle}
                    onChange={(e) => setImageStyle(e.target.value)}
                  >
                    <option value="professional">Professional</option>
                    <option value="creative">Creative</option>
                    <option value="minimal">Minimal</option>
                    <option value="modern">Modern</option>
                  </select>
                </div>
                
                <Button 
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                  onClick={generateAIImage}
                  disabled={generatingImage || !imagePrompt.trim()}
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  {generatingImage ? 'Generating...' : 'Generate AI Image'}
                </Button>
              </TabsContent>
              
              <TabsContent value="stock" className="space-y-3">
                <div className="text-sm text-slate-600 mb-4">
                  Click on any image to add it to your slide, or use "Set as Background" to make it a slide background.
                </div>
                <div className="grid grid-cols-2 gap-3 max-h-96 overflow-y-auto">
                  {stockImages.map((image) => (
                    <div key={image.id} className="group relative">
                      <img 
                        src={image.url} 
                        alt={image.title}
                        className="w-full h-24 object-cover rounded cursor-pointer hover:opacity-75 transition-opacity"
                        onClick={() => addStockImageToSlide(image.url)}
                      />
                      <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded flex items-center justify-center">
                        <div className="space-y-1">
                          <Button
                            size="sm"
                            className="w-full text-xs"
                            onClick={() => addStockImageToSlide(image.url)}
                          >
                            Add to Slide
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="w-full text-xs bg-white/20 border-white/30 text-white hover:bg-white/30"
                            onClick={() => setSlideBackgroundImage(image.url)}
                          >
                            Set Background
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>
              
              <TabsContent value="upload" className="space-y-3">
                <div className="text-sm text-slate-600 mb-4">
                  Upload your own images to use in your presentation.
                </div>
                <div className="border-2 border-dashed border-slate-300 rounded-lg p-8 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="image-upload"
                    disabled={uploadingImage}
                  />
                  <label 
                    htmlFor="image-upload" 
                    className="cursor-pointer"
                  >
                    <ImageIcon className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                    <p className="text-slate-600">
                      {uploadingImage ? 'Uploading...' : 'Click to upload an image'}
                    </p>
                    <p className="text-xs text-slate-500 mt-2">
                      Supports: JPG, PNG, GIF (Max 10MB)
                    </p>
                  </label>
                </div>
                
                {currentSlide?.background_image && (
                  <div className="mt-4">
                    <label className="text-sm font-medium">Current Background:</label>
                    <div className="relative mt-2">
                      <img 
                        src={currentSlide.background_image} 
                        alt="Current background"
                        className="w-full h-24 object-cover rounded"
                      />
                      <Button
                        size="sm"
                        variant="destructive"
                        className="absolute top-2 right-2"
                        onClick={() => updateSlide(currentSlide.id, { background_image: null })}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </div>
        </SheetContent>
      </Sheet>

      {/* Font Panel */}
      <Sheet open={fontPanel} onOpenChange={setFontPanel}>
        <SheetContent className="w-[500px] sm:w-[540px] z-[60]">
          <SheetHeader>
            <SheetTitle className="flex items-center">
              <Type className="w-5 h-5 mr-2" />
              Font System
            </SheetTitle>
            <SheetDescription>
              Choose fonts that match your presentation topic and adjust sizing
            </SheetDescription>
          </SheetHeader>
          
          <div className="mt-6 space-y-6">
            <div className="space-y-3">
              <label className="text-sm font-medium">Topic Style</label>
              <select 
                className="w-full p-3 border rounded-md"
                value={selectedTopic}
                onChange={(e) => setSelectedTopic(e.target.value)}
              >
                <option value="business">Business - Professional & Trustworthy</option>
                <option value="tech">Technology - Modern & Innovative</option>
                <option value="creative">Creative - Friendly & Approachable</option>
                <option value="startup">Startup - Bold & Energetic</option>
                <option value="finance">Finance - Authoritative & Sophisticated</option>
              </select>
            </div>

            <div className="space-y-3">
              <label className="text-sm font-medium">Slide Element</label>
              <select 
                className="w-full p-3 border rounded-md"
                value={selectedSlideType}
                onChange={(e) => setSelectedSlideType(e.target.value)}
              >
                <option value="title">Title Slide - Largest Text</option>
                <option value="header">Header Slide - Large Text</option>
                <option value="content">Content Slide - Medium Text</option>
                <option value="subtitle">Subtitle Slide - Smaller Text</option>
              </select>
            </div>

            {fonts && (
              <div className="space-y-4">
                <div className="bg-slate-50 p-4 rounded-lg">
                  <h4 className="font-semibold mb-3">Font Preview</h4>
                  <div className="space-y-3">
                    <div style={{ fontFamily: fonts.primary }}>
                      <div className="text-sm text-slate-600">Primary: {fonts.primary}</div>
                      <div className="text-xl font-bold">Your Slide Title</div>
                    </div>
                    <div style={{ fontFamily: fonts.secondary }}>
                      <div className="text-sm text-slate-600">Secondary: {fonts.secondary}</div>
                      <div className="text-base">Your slide content and description text</div>
                    </div>
                    <div style={{ fontFamily: fonts.accent }}>
                      <div className="text-sm text-slate-600">Accent: {fonts.accent}</div>
                      <div className="text-sm font-medium">Headers and emphasis</div>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-50 p-3 rounded-lg">
                  <div className="text-sm">
                    <strong>Character:</strong> {fonts.character}
                  </div>
                </div>

                {fontSizes && (
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="text-sm font-medium mb-2">Size Classes for {selectedSlideType}:</div>
                    <div className="text-xs space-y-1">
                      <div><strong>Main:</strong> {fontSizes.main}</div>
                      <div><strong>Subtitle:</strong> {fontSizes.subtitle}</div>
                      <div><strong>Description:</strong> {fontSizes.description}</div>
                    </div>
                  </div>
                )}
              </div>
            )}

            <Button 
              className="w-full"
              onClick={() => {
                // Auto-apply fonts would update the slide
                setFontPanel(false);
              }}
            >
              <Paintbrush className="w-4 h-4 mr-2" />
              Apply Font Style
            </Button>
          </div>
        </SheetContent>
      </Sheet>
    </div>
  );
};

// Main App Component
function App() {
  return (
    <div className="App">
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Dashboard />} />
          <Route path="/editor/:deckId" element={<SlideEditor />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;